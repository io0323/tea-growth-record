# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Scala CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify project structure
      run: |
        echo "=== Current directory ==="
        pwd
        echo "=== Project root contents ==="
        ls -la
        echo "=== package-lock.json status ==="
        if [ -f "package-lock.json" ]; then
          echo "✅ package-lock.json exists"
          ls -la package-lock.json
          echo "File size: $(wc -c < package-lock.json) bytes"
        else
          echo "❌ package-lock.json not found!"
        fi
        echo "=== package.json status ==="
        if [ -f "package.json" ]; then
          echo "✅ package.json exists"
          ls -la package.json
        else
          echo "❌ package.json not found!"
        fi
      
    - name: Clear all caches first
      run: |
        rm -rf node_modules
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
        cache: 'sbt'
        
    - name: Set up Node.js with npm
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
        
    - name: Install Node.js and npm via nvm
      run: |
        echo "=== Installing Node.js and npm via nvm ==="
        
        # Install nvm
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
        
        # Source nvm
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
        
        # Install Node.js 20 (includes npm)
        nvm install 20
        nvm use 20
        
        # Verify installation
        echo "Node.js version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "NPM location: $(which npm)"
        
        # Test npm functionality
        npm config get registry
        
    - name: Install npm explicitly
      run: |
        echo "=== Installing npm explicitly ==="
        
        # Check if npm exists and is working
        if command -v npm &> /dev/null; then
          npm_version=$(npm --version 2>/dev/null || echo "undefined")
          echo "Current npm version: $npm_version"
          
          if [ "$npm_version" != "undefined" ] && [ -n "$npm_version" ]; then
            echo "✅ npm is already working with version: $npm_version"
            npm config get registry
            exit 0
          fi
        fi
        
        echo "❌ npm is not working properly, installing..."
        
        # Method 1: Install npm via Node.js (if npm command exists but is broken)
        if command -v npm &> /dev/null; then
          echo "Attempting to reinstall npm via npm..."
          npm install -g npm@latest 2>/dev/null || echo "npm reinstall failed"
        fi
        
        # Method 2: Install npm via curl (most reliable)
        echo "Installing npm via curl..."
        curl -L https://www.npmjs.com/install.sh | sh
        
        # Method 3: Install npm via apt (Ubuntu/Debian)
        echo "Installing npm via apt..."
        sudo apt-get update
        sudo apt-get install -y npm
        
        # Verify installation
        echo "=== Verification ==="
        echo "NPM version: $(npm --version)"
        echo "NPM location: $(which npm)"
        
        # Test npm functionality
        npm config get registry
        
    - name: Verify Node.js and npm installation
      run: |
        echo "=== Final Verification ==="
        echo "Node.js version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "NPM location: $(which npm)"
        
        # Final check - ensure npm is working
        if ! command -v npm &> /dev/null; then
          echo "❌ npm command not found"
          exit 1
        fi
        
        npm_version=$(npm --version 2>/dev/null || echo "undefined")
        if [ "$npm_version" = "undefined" ] || [ -z "$npm_version" ]; then
          echo "❌ npm version is still undefined"
          echo "Attempting final npm installation..."
          curl -L https://www.npmjs.com/install.sh | sh
          npm_version=$(npm --version 2>/dev/null || echo "undefined")
          if [ "$npm_version" = "undefined" ] || [ -z "$npm_version" ]; then
            echo "❌ npm installation failed completely"
            echo "Trying alternative installation method..."
            sudo apt-get update
            sudo apt-get install -y npm
            npm_version=$(npm --version 2>/dev/null || echo "undefined")
            if [ "$npm_version" = "undefined" ] || [ -z "$npm_version" ]; then
              echo "❌ All npm installation methods failed"
              exit 1
            fi
          fi
        fi
        
        echo "✅ npm is working correctly with version: $npm_version"
        
        # Test npm functionality
        npm config get registry > /dev/null
        if [ $? -eq 0 ]; then
          echo "✅ npm functionality test passed"
        else
          echo "❌ npm functionality test failed"
          exit 1
        fi
        
        # Additional test - try to run npm help
        npm help > /dev/null
        if [ $? -eq 0 ]; then
          echo "✅ npm help test passed"
        else
          echo "❌ npm help test failed"
          exit 1
        fi
        
    - name: Install npm dependencies
      run: |
        # Ensure we're in the project root
        pwd
        echo "=== Checking package-lock.json ==="
        if [ -f "package-lock.json" ]; then
          echo "package-lock.json exists, using npm ci"
          ls -la package-lock.json
          npm ci
        else
          echo "package-lock.json not found, generating it with npm install"
          npm install
        fi
        echo "Dependencies installed successfully"
        
    - name: Setup sbt
      uses: sbt/setup-sbt@v1
        
    - name: Cache sbt dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.sbt
          ~/.ivy2/cache
          ~/.coursier/cache/v1
          project/target
          target
        key: ${{ runner.os }}-sbt-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('**/project/build.properties') }}-cache-v2
        restore-keys: |
          ${{ runner.os }}-sbt-${{ hashFiles('**/*.sbt') }}-
          ${{ runner.os }}-sbt-
          
    - name: Clean and update dependencies
      run: |
        # Clean and update dependencies
        sbt clean update
        
        # Verify dependencies - show actual resolved versions
        echo "=== Project dependencies ==="
        sbt "show libraryDependencies" | grep -E "(play-|scala-xml)" || echo "No Play Framework dependencies found"
        
    - name: Compile project
      run: sbt compile
        
    - name: Run tests
      run: sbt test
      
    - name: Upload dependency graph
      uses: scalacenter/sbt-dependency-submission@ab086b50c947c9774b70f39fc7f6e20ca2706c91
