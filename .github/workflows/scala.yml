# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Scala CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify project structure
      run: |
        echo "=== Current directory ==="
        pwd
        echo "=== Project root contents ==="
        ls -la
        echo "=== package-lock.json status ==="
        ls -la package-lock.json || echo "package-lock.json not found!"
        echo "=== package.json status ==="
        ls -la package.json || echo "package.json not found!"
      
    - name: Clear all caches first
      run: |
        rm -rf node_modules
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
        cache: 'sbt'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
        
    - name: Verify Node.js and npm installation
      run: |
        echo "Node.js version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "NPM location: $(which npm)"
        echo "NPM config: $(npm config list)"
        
        # Ensure npm is working
        npm --version
        npm config get registry
        
    - name: Install npm dependencies
      run: |
        # Ensure we're in the project root and package-lock.json exists
        pwd
        ls -la package-lock.json
        echo "Installing dependencies using package-lock.json..."
        npm ci
        echo "Dependencies installed successfully"
        
    - name: Setup sbt
      uses: sbt/setup-sbt@v1
        
    - name: Cache sbt dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.sbt
          ~/.ivy2/cache
          ~/.coursier/cache/v1
          project/target
          target
        key: ${{ runner.os }}-sbt-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('**/project/build.properties') }}-cache-v2
        restore-keys: |
          ${{ runner.os }}-sbt-${{ hashFiles('**/*.sbt') }}-
          ${{ runner.os }}-sbt-
          
    - name: Force clean all SBT caches
      run: |
        # Remove all possible SBT cache locations
        rm -rf ~/.sbt
        rm -rf ~/.ivy2
        rm -rf ~/.coursier
        rm -rf ~/.cache/coursier
        rm -rf project/target
        rm -rf target
        rm -rf server/project/target
        rm -rf server/target
        
    - name: Clean and update dependencies
      run: |
        # Force update dependencies
        sbt clean
        sbt reload
        sbt update
        
        # Clean server project
        cd server && sbt clean
        cd server && sbt reload
        cd server && sbt update
        
        # Verify dependencies - show actual resolved versions
        echo "=== Root project dependencies ==="
        sbt "show libraryDependencies" | grep -i play-json-joda || echo "No play-json-joda found in root"
        
        echo "=== Server project dependencies ==="
        cd server && sbt "show libraryDependencies" | grep -i play-json-joda || echo "No play-json-joda found in server"
        
    - name: Compile (Root project)
      run: sbt compile
        
    - name: Compile (Server project)
      run: cd server && sbt compile
        
    - name: Run tests (Root project)
      run: sbt test
        
    - name: Run tests (Server project)
      run: cd server && sbt test
      
    - name: Upload dependency graph
      uses: scalacenter/sbt-dependency-submission@ab086b50c947c9774b70f39fc7f6e20ca2706c91
